import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import { join, resolve } from "path";
import {
	copyFileSync,
	existsSync,
	mkdirSync,
	readFileSync,
	writeFileSync,
} from "fs";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const manifest = JSON.parse(readFileSync("./manifest.json", "utf8"));
const prod = process.argv[2] === "production";
const outPath = prod ? "./" : `./test-vault/.obsidian/plugins/${manifest.id}`;

if (!prod) {
	if (!existsSync(outPath)) {
		mkdirSync(outPath, { recursive: true });
	}
	copyFileSync("./manifest.json", join(outPath, "manifest.json"));
	copyFileSync("./styles.css", join(outPath, "styles.css"));
	writeFileSync(
		join(outPath, ".hotreload"),
		"# Tell the hot-reload plugin to watch main.js and reload Obsidian when it changes."
	);
}

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins,
	],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: resolve(outPath, "main.js"),
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
